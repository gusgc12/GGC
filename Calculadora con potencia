package calculadora;

import java.text.DecimalFormat;
import java.util.Stack;

/**
 *
 * @author gonzalo
 */
public class Calculador {

    private String numero;

    public Calculador(String numero) {
        this.numero = numero;
    }

    public boolean revisarParentesis() {
        boolean res = false;
        int n;
        n = numero.length();
        if (n > 0) {
            char c;
            int i = 0;
            FilaA<Character> p = new FilaA();

            while (i < n) {
                c = numero.charAt(i);

                if (c == '(') {
                    p.push(c);
                } else if (c == ')') {
                    if (p.isEmpty()) {
                        i = n + 1;
                    } else {
                        try {
                            p.pop();
                        } catch (ExcepcionColeccionVacia e) {
                            i = n;
                        }
                    }
                }

                i++;
            }
            res = i == n && p.isEmpty();

        }

        return res;
    }

    public boolean numParSeguido(){
        boolean res=true;
        int n= numero.length();
        char c,d;
        int i=1;
        
        while(i<n && res ){           
            c= numero.charAt(i);
            d=numero.charAt(i-1);
            if(numero(c)){               
                if(parIzq(d)){
                 res=false;
                }
              }
            if(parDer(c)){
                if(numero(d)){
                    res=false;
                }
            }
            if(ope(c)){
                if(parDer(d)){
                    res=false;
                }
            }
            
             
            i++;
            
        }
        return res;
    }
    
    
    public int jerarquia(char ope) {
        char res = 0;
        switch (ope) {          
            case('^'):
                res=3;
                break;
            
            case(')'):
                res=4;
                break;
            case ('+'):
                res = 1;
                break;
            case ('_'):
                res = 1;
                break;
           
            case ('*'):
                res = 2;
                break;
            case ('/'):    
                res = 2;
                break;
            case('('):
                res=0;
                break;
        }
        return res;
    }

    public boolean ope(char ope) {

        return ope == '+' || ope == '_' || ope == '*' || ope == '/'|| ope == '^';
    }

    public boolean parDer(char par1) {
        return par1 == '(';
    }

    public boolean parIzq(char par1) {
        return par1 == ')';
    }

    public boolean numero(char num) {

        return num == '0' || num == '1' || num == '2' || num == '3' || num == '4' || num == '5' || num == '6' || num == '7' || num == '8' || num == '9' || num == '.'||num == '-';
    }

    public String postFijo(){
        StringBuilder cad = new StringBuilder();
        if (revisarParentesis() && numParSeguido()  ) {
            
            int n;
            n = numero.length();
            int i = 0;

            Stack<Character> pila = new Stack();

            while (i < n) {

                char c, f = 'i';

                c = numero.charAt(i);

                if (parDer(c)) {
                    
                    pila.push(c);
                    

                }
                if (numero(c)) {
                   
                    if((i+1)==n){
                            cad.append(c);
                            cad.append(',');
                    }
                    else{
                        f= numero.charAt(i + 1);
                        if(!numero(f)){
                            cad.append(c);
                            cad.append(',');
                        }
                        else{
                            cad.append(c);
                            
                        }
                    }               
                }
                if (parIzq(c)) {
                   
                    
                    while(!pila.empty()  &&  !parDer(pila.peek())) {
                        cad.append(pila.pop());                   
                    }
                    
                    pila.pop(); 
                }
                if(ope(c)){

                    while(!pila.empty()&& jerarquia(c)<=jerarquia(pila.peek())){ 
                        cad.append(pila.pop());                         
                    }
                    
                    pila.push(c); 
                }
                
               i++; 
            }
            while(!pila.empty()&&!parDer(pila.peek())){
                cad.append(pila.pop());
                
            }
        }
        else
            cad.append('$');
                    
        
        
        return cad.toString();
    }
    
     private String operaciones(char c, double num2, double num1){
        String res = "";
        DecimalFormat n = new DecimalFormat("0.000");
        switch(c){         
            case '^':
                res = n.format(Math.pow(num2, num1));
                break;
            case '*':
                res = n.format(num1 * num2);
                break;
            case '/':
                res = n.format(num2 / num1);
                break;
            case '+':
                res = n.format(num1 + num2);
                break;
            case '_':
                res = n.format(num2 - num1);
                break;
        }
        return res;
    }
    
    public String hacerOperación(String postfija){
        
        Stack <String> pila2 = new Stack();
        int i;
        char c,f;
        StringBuilder aux = new StringBuilder();
        double num1, num2;
        int n;
        n=postfija.length();
        if(!postfija.equals("$")){        
         for(i = 0; i<n; i++){
            c = postfija.charAt(i);
            if(numero(c)){
                
                f = postfija.charAt(i+1);
                if(f!=','){               
                    aux.append(c); 
                }
                else{
                    
                    aux.append(c);
                    pila2.push(aux.toString());    
                    aux.delete(0, (aux.length()));
                    
                }
                
            }
                         
            if(ope(c)){
                try {
                   
                   num1 = Double.parseDouble(pila2.pop()); 
                   num2 = Double.parseDouble(pila2.pop());
                   pila2.push(operaciones(c, num2, num1));
                   
                } catch (Exception e){
                    pila2.push("Error.");
                }
            }
            
         }
        }
        else
            pila2.push("Error.");
        
        return pila2.pop();
        
    }
    

    public static void main(String[] args) {

        Calculador c1;
        String numero;

        c1 = new Calculador("(((8*9)/9)+9)");
      
        System.out.println(c1.postFijo());
        
        System.out.println(c1.hacerOperación(c1.postFijo()));
        
      

    }

}
